{"ast":null,"code":"var _jsxFileName = \"/home/paul/Repos/WedSite/wedsite/src/Layout/Main/Rsvp/RsvpForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Rsvp } from '../../../Data/Database';\nimport { Formik, Field, Form } from 'formik';\nimport { Button } from '../../Common/Static';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RSVPform(props) {\n  _s();\n\n  const [serverError, setServerError] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"RSVP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: true,\n      initialValues: {\n        email: email,\n        response: props.response\n      },\n      validate: values => {\n        const errors = {};\n\n        if (!values.email && values.response === 'yes') {\n          errors.email = 'Email Required';\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email) && values.response === 'yes') {\n          errors.email = 'Invalid email address';\n        }\n\n        return errors;\n      },\n      onSubmit: values => {\n        Rsvp({\n          name: props.name,\n          email: values.email,\n          response: values.response\n        }, props.auth).then(() => {\n          props.setResponse(values.response);\n          props.setEmail(values.email);\n          props.toggleForm();\n        }).catch(err => {\n          console.log(err);\n          setServerError(true);\n        });\n      },\n      children: ({\n        errors,\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [serverError ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Server may be down!! Please try again later.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this) : null, errors.email ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }, this) : null, /*#__PURE__*/_jsxDEV(Field, {\n          type: \"email\",\n          name: \"email\",\n          className: \"email\",\n          placeholder: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"question\",\n          children: \"Will you be attending?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          className: \"response\",\n          as: \"select\",\n          name: \"response\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"maybe\",\n            children: \"Maybe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"yes\",\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"no\",\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          text: \"RSVP\",\n          disabled: isSubmitting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(RSVPform, \"c9+zUqUBByPe9JHzEOKOeIOJIgE=\");\n\n_c = RSVPform;\n\nvar _c;\n\n$RefreshReg$(_c, \"RSVPform\");","map":{"version":3,"sources":["/home/paul/Repos/WedSite/wedsite/src/Layout/Main/Rsvp/RsvpForm.js"],"names":["React","useState","Rsvp","Formik","Field","Form","Button","RSVPform","props","serverError","setServerError","email","response","values","errors","test","name","auth","then","setResponse","setEmail","toggleForm","catch","err","console","log","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Rsvp } from '../../../Data/Database'\nimport { Formik, Field, Form } from 'formik'\nimport { Button } from '../../Common/Static'\n\nexport default function RSVPform(props) {\n  const [serverError, setServerError] = useState(false)\n\n  return (\n    <>\n      <h2>RSVP</h2>\n      <Formik\n        enableReinitialize={true}\n        initialValues={{\n          email: email,\n          response: props.response,\n        }}\n        validate={(values) => {\n          const errors = {}\n          if (!values.email && values.response === 'yes') {\n            errors.email = 'Email Required'\n          } else if (\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email) &&\n            values.response === 'yes'\n          ) {\n            errors.email = 'Invalid email address'\n          }\n          return errors\n        }}\n        onSubmit={(values) => {\n          Rsvp(\n            {\n              name: props.name,\n              email: values.email,\n              response: values.response,\n            },\n            props.auth\n          )\n            .then(() => {\n              props.setResponse(values.response)\n              props.setEmail(values.email)\n              props.toggleForm()\n            })\n            .catch((err) => {\n              console.log(err)\n              setServerError(true)\n            })\n        }}\n      >\n        {({ errors, isSubmitting }) => (\n          <Form>\n            {serverError ? (\n              <p>Server may be down!! Please try again later.</p>\n            ) : null}\n            {errors.email ? <p>{errors.email}</p> : null}\n            <Field\n              type='email'\n              name='email'\n              className='email'\n              placeholder='email'\n            />\n            <label className='question'>Will you be attending?</label>\n            <Field className='response' as='select' name='response'>\n              <option value='maybe'>Maybe</option>\n              <option value='yes'>Yes</option>\n              <option value='no'>No</option>\n            </Field>\n            <Button type='submit' text='RSVP' disabled={isSubmitting} />\n          </Form>\n        )}\n      </Formik>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}