{"ast":null,"code":"var _jsxFileName = \"/home/paul/Repos/WedSite/wedsite/src/Layout/Main/Rsvp/RsvpForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Rsvp, GetRsvp, CheckAuth } from '../../../Data/Database';\nimport { Formik, Field, Form } from 'formik';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RSVPform(props) {\n  _s();\n\n  const [email, setEmail] = useState('');\n  const [response, setResponse] = useState(\"maybe\");\n  const [serverError, setServerError] = useState(false);\n  useEffect(() => {\n    console.log(\"here\");\n    CheckAuth(values.name, values.password).then(data => {\n      if (data.status === 203) {\n        setNameError(true);\n        actions.setSubmitting(false);\n      } else {\n        props.setAuth(data.headers.authorization);\n        props.setName(values.name);\n        actions.setSubmitting(false);\n      }\n    }).catch(() => {\n      setServerError(true);\n      actions.setSubmitting(false);\n    });\n    /* GetRsvp(props.name).\n         then(data => {\n             setEmail(data.body.email);\n             setResponse(data.body.response);\n         }).catch((err) => {\n             console.log(err);\n             setServerError(true);\n         })*/\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"RSVP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        name: props.name,\n        email: email,\n        response: response,\n        text: ''\n      },\n      validate: values => {\n        const errors = {};\n\n        if (!values.email && values.response === \"yes\") {\n          errors.email = 'Email Required';\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email) && values.response === \"yes\") {\n          errors.email = 'Invalid email address';\n        }\n\n        return errors;\n      },\n      onSubmit: values => {\n        Rsvp({\n          name: values.name,\n          email: values.email,\n          response: values.response,\n          text: values.text\n        }).then(() => {\n          props.setOpenRsvpForm(false);\n        }).catch(() => {\n          setServerError(true);\n        });\n      },\n      children: ({\n        values,\n        errors,\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [serverError ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Server may be down!! Please try again later.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 40\n        }, this) : null, errors.email ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 29\n        }, this) : null, /*#__PURE__*/_jsxDEV(Field, {\n          type: \"text\",\n          name: \"name\",\n          className: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          type: \"email\",\n          name: \"email\",\n          className: \"email\",\n          placeholder: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"question\",\n          children: \"Will you be attending?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          className: \"response\",\n          as: \"select\",\n          name: \"response\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"maybe\",\n            children: \"Maybe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"yes\",\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"no\",\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          as: \"textarea\",\n          name: \"text\",\n          placeholder: \"Any Questions?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"rsvpButton\",\n          type: \"submit\",\n          disabled: isSubmitting,\n          children: \"RSVP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(RSVPform, \"lkARaSqjZ38SKBEXbCKqoecqBLI=\");\n\n_c = RSVPform;\n\nvar _c;\n\n$RefreshReg$(_c, \"RSVPform\");","map":{"version":3,"sources":["/home/paul/Repos/WedSite/wedsite/src/Layout/Main/Rsvp/RsvpForm.js"],"names":["React","useState","useEffect","Rsvp","GetRsvp","CheckAuth","Formik","Field","Form","RSVPform","props","email","setEmail","response","setResponse","serverError","setServerError","console","log","values","name","password","then","data","status","setNameError","actions","setSubmitting","setAuth","headers","authorization","setName","catch","text","errors","test","setOpenRsvpForm","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Rsvp, GetRsvp, CheckAuth } from '../../../Data/Database';\nimport { Formik, Field, Form } from 'formik';\n\nexport default function RSVPform(props) {\n\n    const [email, setEmail] = useState('');\n    const [response, setResponse] = useState(\"maybe\");\n    const [serverError, setServerError] = useState(false);\n\n    useEffect(() => {\n        console.log(\"here\");\n        CheckAuth(values.name, values.password).\n            then((data) => {\n                if (data.status === 203) {\n                    setNameError(true);\n                    actions.setSubmitting(false);\n                } else {\n                    props.setAuth(data.headers.authorization);\n                    props.setName(values.name);\n                    actions.setSubmitting(false);\n                }\n            }).catch(() => {\n                setServerError(true);\n                actions.setSubmitting(false);\n            })\n\n        /* GetRsvp(props.name).\n             then(data => {\n                 setEmail(data.body.email);\n                 setResponse(data.body.response);\n             }).catch((err) => {\n                 console.log(err);\n                 setServerError(true);\n             })*/\n    }, [])\n\n    return (\n        <>\n            <h2>RSVP</h2>\n            <Formik\n                initialValues={{\n                    name: props.name,\n                    email: email,\n                    response: response,\n                    text: ''\n                }}\n                validate={values => {\n                    const errors = {};\n                    if (!values.email && (values.response === \"yes\")) {\n                        errors.email = 'Email Required';\n                    } else if (\n                        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email) &&\n                        (values.response === \"yes\")\n                    ) {\n                        errors.email = 'Invalid email address';\n                    }\n                    return errors;\n                }}\n                onSubmit={values => {\n                    Rsvp({\n                        name: values.name,\n                        email: values.email,\n                        response: values.response,\n                        text: values.text\n                    }).then(() => {\n                        props.setOpenRsvpForm(false);\n                    }).catch(() => {\n                        setServerError(true);\n                    });\n                }}\n            >\n                {({ values, errors, isSubmitting }) => (\n                    <Form >\n                        {serverError ? <p>Server may be down!! Please try again later.</p>\n                            : null}\n                        {errors.email ?\n                            <p>{errors.email}</p> : null}\n                        <Field type=\"text\" name=\"name\"\n                            className=\"name\" />\n                        <Field type=\"email\" name=\"email\"\n                            className=\"email\"\n                            placeholder=\"email\" />\n                        <label className=\"question\">\n                            Will you be attending?</label>\n                        <Field className=\"response\" as=\"select\" name=\"response\" >\n                            <option value=\"maybe\">Maybe</option>\n                            <option value=\"yes\">Yes</option>\n                            <option value=\"no\">No</option>\n                        </Field>\n                        <Field as=\"textarea\" name=\"text\"\n                            placeholder=\"Any Questions?\" />\n                        <button className=\"rsvpButton\"\n                            type=\"submit\"\n                            disabled={isSubmitting}\n                        >RSVP</button>\n                    </Form>\n                )}\n            </Formik>\n        </>);\n}\n"]},"metadata":{},"sourceType":"module"}