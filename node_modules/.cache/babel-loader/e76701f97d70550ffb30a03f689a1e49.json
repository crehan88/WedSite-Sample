{"ast":null,"code":"var _jsxFileName = \"/home/paul/Repos/WedSite/wedsite/src/Layout/Main/Rsvp/RsvpAdmin.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport RsvpIndividual from './RsvpIndividual';\nimport RsvpList from './RsvpList';\nimport RsvpAdd from './RsvpAdd';\nimport { GetList, RemovePerson, EditInvite } from '../../../Data/Database';\nimport { Button } from '../../Common/Static';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RsvpAdmin(props) {\n  _s();\n\n  const [individual, setIndividual] = useState(false);\n  const [selected, setSelected] = useState({});\n  const [list, setList] = useState([]);\n  const [openForm, setOpenForm] = useState(false);\n  const [removeError, setRemoveError] = useState('');\n  const [serverError, setServerError] = useState(false);\n  const [display, setDisplay] = useState([]);\n\n  function toggleList() {\n    setIndividual(!individual);\n  }\n\n  function toggleForm() {\n    setOpenForm(!openForm);\n  }\n\n  function copyEmails() {\n    let emailListSting = '';\n    list.forEach(person => {\n      emailListSting = emailListSting + ' ' + person.email;\n    });\n    navigator.clipboard.writeText(emailListSting);\n  }\n\n  function removePerson(person) {\n    RemovePerson(person, props.auth).then(data => {\n      console.log(data);\n\n      if (data.statusCode === 203) {\n        setRemoveError(person.name);\n      } else {\n        setIndividual(false);\n        let newList = list.filter(listPerson => listPerson.name !== data.data);\n        setList(newList);\n        setDisplay(newList);\n      }\n    }).catch(() => {\n      setServerError(true);\n    });\n  }\n\n  function addPerson(person) {\n    list.push(person);\n    setDisplay(list);\n    setList(list);\n  }\n\n  function editPerson(oldName, newName) {\n    EditInvite(newName, oldName, props.auth).then(() => {\n      let newList = list.map(invite => {\n        if (invite.name === oldName) {\n          invite.name = newName;\n          return invite;\n        }\n\n        return invite;\n      });\n      setList(newList);\n      setDisplay(newList);\n      setIndividual(false);\n    }).catch(() => {\n      setServerError(true);\n    });\n  }\n\n  function filterList(regex) {\n    let newList = list.filter(person => person.name.toLowerCase().replace(/\\s/g, '').match(regex));\n\n    if (newList.length) {\n      setDisplay(newList);\n    }\n  }\n\n  useEffect(() => {\n    GetList(props.auth).then(data => {\n      setList(JSON.parse(data.data));\n      setDisplay(JSON.parse(data.data));\n    }).catch(err => {\n      console.log('Error :', err);\n    });\n  }, [props.auth]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: openForm ? 'Add Rsvp' : individual ? 'Rsvp' : 'Rsvp List'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rsvpadmin\",\n      children: [removeError !== '' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [removeError, \" does not exist\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 31\n      }, this) : null, serverError ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"There is a server error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 24\n      }, this) : null, openForm ? /*#__PURE__*/_jsxDEV(RsvpAdd, {\n        auth: props.auth,\n        toggleForm: toggleForm,\n        addPerson: addPerson\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this) : individual ? /*#__PURE__*/_jsxDEV(RsvpIndividual, {\n        auth: props.auth,\n        toggleList: toggleList,\n        selected: selected,\n        removePerson: removePerson,\n        editPerson: editPerson\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(RsvpList, {\n        setSelected: setSelected,\n        list: display,\n        toggleList: toggleList,\n        filterList: filterList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), openForm || individual ? null : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          text: \"Add Invite\",\n          clickAction: toggleForm,\n          className: \"addInviteButton\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Copy Emails\",\n          clickAction: copyEmails,\n          className: \"copyEmails\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(RsvpAdmin, \"0/YqegoW3LVndqg4PEy7g+9sveQ=\");\n\n_c = RsvpAdmin;\n\nvar _c;\n\n$RefreshReg$(_c, \"RsvpAdmin\");","map":{"version":3,"sources":["/home/paul/Repos/WedSite/wedsite/src/Layout/Main/Rsvp/RsvpAdmin.js"],"names":["React","useEffect","useState","RsvpIndividual","RsvpList","RsvpAdd","GetList","RemovePerson","EditInvite","Button","RsvpAdmin","props","individual","setIndividual","selected","setSelected","list","setList","openForm","setOpenForm","removeError","setRemoveError","serverError","setServerError","display","setDisplay","toggleList","toggleForm","copyEmails","emailListSting","forEach","person","email","navigator","clipboard","writeText","removePerson","auth","then","data","console","log","statusCode","name","newList","filter","listPerson","catch","addPerson","push","editPerson","oldName","newName","map","invite","filterList","regex","toLowerCase","replace","match","length","JSON","parse","err"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport RsvpIndividual from './RsvpIndividual'\nimport RsvpList from './RsvpList'\nimport RsvpAdd from './RsvpAdd'\nimport { GetList, RemovePerson, EditInvite } from '../../../Data/Database'\nimport { Button } from '../../Common/Static'\n\nexport default function RsvpAdmin(props) {\n  const [individual, setIndividual] = useState(false)\n  const [selected, setSelected] = useState({})\n  const [list, setList] = useState([])\n  const [openForm, setOpenForm] = useState(false)\n  const [removeError, setRemoveError] = useState('')\n  const [serverError, setServerError] = useState(false)\n  const [display, setDisplay] = useState([])\n\n  function toggleList() {\n    setIndividual(!individual)\n  }\n  function toggleForm() {\n    setOpenForm(!openForm)\n  }\n\n  function copyEmails() {\n    let emailListSting = ''\n    list.forEach((person) => {\n      emailListSting = emailListSting + ' ' + person.email\n    })\n    navigator.clipboard.writeText(emailListSting)\n  }\n\n  function removePerson(person) {\n    RemovePerson(person, props.auth)\n      .then((data) => {\n      console.log(data)\n        if (data.statusCode === 203) {\n          setRemoveError(person.name)\n        } else {\n          setIndividual(false)\n          let newList = list.filter(\n            (listPerson) => listPerson.name !== data.data\n          )\n          setList(newList)\n          setDisplay(newList)\n        }\n      })\n      .catch(() => {\n        setServerError(true)\n      })\n  }\n  function addPerson(person) {\n    list.push(person)\n    setDisplay(list)\n    setList(list)\n  }\n\n  function editPerson(oldName, newName) {\n    EditInvite(newName, oldName, props.auth)\n      .then(() => {\n        let newList = list.map((invite) => {\n          if (invite.name === oldName) {\n            invite.name = newName\n            return invite\n          }\n          return invite\n        })\n        setList(newList)\n        setDisplay(newList)\n        setIndividual(false)\n      })\n      .catch(() => {\n        setServerError(true)\n      })\n  }\n\n  function filterList(regex) {\n    let newList = list.filter((person) =>\n      person.name.toLowerCase().replace(/\\s/g, '').match(regex)\n    )\n    if (newList.length) {\n      setDisplay(newList)\n    }\n  }\n\n  useEffect(() => {\n    GetList(props.auth)\n      .then((data) => {\n        setList(JSON.parse(data.data))\n        setDisplay(JSON.parse(data.data))\n      })\n      .catch((err) => {\n        console.log('Error :', err)\n      })\n  }, [props.auth])\n\n  return (\n    <>\n      <h2>{openForm ? 'Add Rsvp' : individual ? 'Rsvp' : 'Rsvp List'}</h2>\n      <div className='rsvpadmin'>\n        {removeError !== '' ? <p>{removeError} does not exist</p> : null}\n        {serverError ? <p>There is a server error</p> : null}\n        {openForm ? (\n          <RsvpAdd\n            auth={props.auth}\n            toggleForm={toggleForm}\n            addPerson={addPerson}\n          />\n        ) : individual ? (\n          <RsvpIndividual\n            auth={props.auth}\n            toggleList={toggleList}\n            selected={selected}\n            removePerson={removePerson}\n            editPerson={editPerson}\n          />\n        ) : (\n          <RsvpList\n            setSelected={setSelected}\n            list={display}\n            toggleList={toggleList}\n            filterList={filterList}\n          />\n        )}\n        {openForm || individual ? null : (\n          <>\n            <Button\n              text='Add Invite'\n              clickAction={toggleForm}\n              className='addInviteButton'\n            />\n            <Button\n              text='Copy Emails'\n              clickAction={copyEmails}\n              className='copyEmails'\n            />\n          </>\n        )}\n      </div>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}